# mini or extra large datasets

dictionary = {
    # alpha = 1.5
    # beta = 1.2
    # N is 22 or 2200
    '2mm_1': {
        'e': 't + (1.5 * a * b)',
        # N * alpha * max(a*b)
        'v': {'a':[0,1],'b':[0,1],'t':[0,2200*1.5*1],}
    },
    # N is 18 or 1800
    '2mm_2': {
        'e': 'd + (t * c)',
        # d initially in beta*[0,1]
        # N * max(t*c) + d
        'v': {'t':[0,1],'c':[0,1],'d':[0,1800*(2200*1.5*1)+1.2],}
    },
    # N = 20 or 2000
    '3mm': {
        'e': 'e + (a * b)',
        # N * max(a*b)
        'v': {'a':[0,0.2],'b':[0,0.2],'e':[0,2000*0.04],}
    },
    # M is 28 or 2600
    # N is 32 or 3000
    # (i*j)/M + i
    'correlation': {
        'e': 's + ((d+m)*(d+m))',
        'v': {
            's': [0, 1],
            'd': [0, 3000+3000],
            'm': [-1, 0],
        }
    },
    'deriche': {
        'e': '(a*i) + (c*x) + (b*y) + (d*z)',
        'v': {
            'a': [0, 1],
            'i': [0, 1],
            'c': [0, 1],
            'x': [0, 1],
            'b': [0, 1],
            'y': [0, 1],
            'd': [0, 1],
            'z': [0, 1],
        }
    },
    # NX is 20 or 2000
    # NY is 30 or 2600
    # TMAX is 20 or 1000
    'fdtd-2d_1': {
        'e': 'a + (0.5 * (c + b))',
        'v': {'a':[0,1],'b':[-1,0],'c':[0,1]}
    },
    # N * 
    'fdtd-2d': {
        'e': 'h + (-0.7)*(e + f + y + z)',
        'v': {'h':[0,1], 'e':[0,1], 'f':[-1,0], 'y':[0,1], 'z':[-1,0], 'h':[0,1],}
    },
    'gemm': {
        'e': 'c + (32412 * a * b)',
        'v': {
            'a': [0, 1],
            'b': [0, 1],
            'c': [0, 1],
        }
    },
    # N = 40 or 4000
    # u1[i] = i;
    # u2[i] = ((i+1)/n)/2.0;
    # v1[i] = ((i+1)/n)/4.0;
    # v2[i] = ((i+1)/n)/6.0;
    # A[i][j] = (DATA_TYPE) (i*j % n) / n;
    'gemver': {
        'e': 'a + (u * v)+ (w * x)',
        'v': {
            'a': [0, 1],
            'u': [0, 4000],
            'v': [0, 4000/2],
            'w': [0, 4000/4],
            'x': [0, 4000/6],
        }
    },
    # N = 10 or 200
    # (i + j + (n-k))* 10 / (n);
    'heat-3d': {
        'e': '''0.125 * (a + (-2) * b + c)
                 + 0.125 * (c + (-2) * b + d)
                 + 0.125 * (e + (-2) * b + f)
                 + b''',
        'v': { # (3n)*10/n
            'a': [0, 30],
            'b': [0, 30],
            'c': [0, 30],
            'd': [0, 30],
            'e': [0, 30],
            'f': [0, 30],
        },
        'max_transformation_depth': 4,
    },
    'jacobi-1d': {
        'e': '0.33333 * (a + b + c)',
        'v': {
            'a': [0, 1],
            'b': [0, 1],
            'c': [0, 1],
        }
    },
    'seidel': {
        'e': '0.2*(a+b+c+d+e)',
        'v': {
            'a': [0, 1],
            'b': [0, 1],
            'c': [0, 1],
            'd': [0, 1],
            'e': [0, 1],
        }
    },
    # alpha = 1.5
    # beta = 1.2
    # M is 20 or 2000
    # N is 30 or 2600
    'symm': {
        'e': '(1.2 * c) + (1.5 * a * b) + (1.5 * t)',
        'v': {
            'a': [0, 100/20],
            'b': [0, 100/20],
            'c': [0, 100/20],
            't': [0, 1],
        }
    },
    # alpha = 1.5
    # beta = 1.2
    # M is 20 or 2000
    # N is 30 or 2600
    'syr2k': {
        'e': 'c + (a*1.5*b) + (e*1.5*d)',
        'v': {
            'a': [0, 1],
            'b': [0, 1],
            'c': [0, 1.2*2600/2000],
            'd': [0, 1],
            'e': [0, 1],
        }
    },
    # alpha = 1.5
    # beta = 1.2
    'syrk': {
        'e': 'c + (1.5*a*b)',
        'v': {
            'a': [0, 1],
            'b': [0, 1],
            'c': [0, 1.2],
        }
    },
    
}